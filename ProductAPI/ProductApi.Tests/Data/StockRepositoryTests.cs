using FluentAssertions;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Logging;
using Moq;
using ProductApi.Data.Context;
using ProductApi.Data.Repositories;
using ProductApi.Models.Entity;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Expressions;
using System.Text;
using System.Threading.Tasks;

namespace ProductApi.Tests.Data
{
    public class StockRepositoryTests
    {
        private readonly Mock<ILogger<StockRepository>> _loggerMock;
        private readonly AppDbContext _context;
        private readonly StockRepository _repository;

        public StockRepositoryTests()
        {
            // Setup the in-memory database
            var options = new DbContextOptionsBuilder<AppDbContext>()
                .UseInMemoryDatabase(databaseName: "TestDatabase")
                .Options;

            _context = new AppDbContext(options);

            // Clear the database before each test
            _context.Database.EnsureDeleted();
            _context.Database.EnsureCreated();

            // Mock the logger
            _loggerMock = new Mock<ILogger<StockRepository>>();

            // Initialize the repository with in-memory DB context and mocked logger
            _repository = new StockRepository(_context, _loggerMock.Object);
        }

        [Fact]
        public async Task GetStockByProductIdAsync_ReturnsNull_WhenStockNotFound()
        {
            // Arrange
            int productId = 1;

            // Act
            var result = await _repository.GetStockByProductIdAsync(productId);

            // Assert
            Assert.Null(result);
        }

        [Fact]
        public async Task GetStockByProductIdAsync_ReturnsStock_WhenStockExists()
        {
            // Arrange
            var stock = new Stock { Quantity = 10 };  //  ProductId is autogenerated
            _context.Stocks.Add(stock);
            await _context.SaveChangesAsync();
            var productId = stock.ProductId;

            // Act
            var result = await _repository.GetStockByProductIdAsync(productId);

            // Assert
            Assert.NotNull(result);
            Assert.Equal(productId, result.ProductId);
            Assert.Equal(10, result.Quantity);
        }

        [Fact]
        public async Task UpdateStockAsync_UpdatesQuantity_WhenStockExists()
        {
            // Arrange
            var initialQuantity = 10;
            var stock = new Stock { Quantity = initialQuantity };
            _context.Stocks.Add(stock);
            await _context.SaveChangesAsync();
            var productId = stock.ProductId;

            var quantityToUpdate = 5;

            // Act
            await _repository.UpdateStockAsync(productId, quantityToUpdate);
            var updatedStock = await _repository.GetStockByProductIdAsync(productId);

            // Assert
            Assert.NotNull(updatedStock);
            Assert.Equal(initialQuantity + quantityToUpdate, updatedStock.Quantity);
        }

        [Fact]
        public async Task UpdateStockAsync_ThrowsException_WhenStockNotFound()
        {
            // Arrange
            var productId = 1;

            // Act & Assert
            var exception = await Assert.ThrowsAsync<KeyNotFoundException>(() => _repository.UpdateStockAsync(productId, 5));
            Assert.Equal($"Stock record not found for product ID {productId}.", exception.Message);
        }

        [Theory]
        [InlineData(10, 5, 15)]  // productId, initial quantity, quantity to update, expected new quantity
        [InlineData( 0, 5, 5)]    // another test case
        public async Task UpdateStockAsync_UpdatesStock_Correctly(int initialQuantity, int quantityToUpdate, int expectedQuantity)
        {
            // Arrange
            var stock = new Stock { Quantity = initialQuantity };
            _context.Stocks.Add(stock);
            await _context.SaveChangesAsync();
            var productId = stock.ProductId;

            // Act
            await _repository.UpdateStockAsync(productId, quantityToUpdate);
            var updatedStock = await _repository.GetStockByProductIdAsync(productId);

            // Assert
            Assert.NotNull(updatedStock);
            Assert.Equal(expectedQuantity, updatedStock.Quantity);
        }

        [Fact]
        public async Task UpdateStockAsync_ThrowsException_WhenConcurrencyErrorOccurs()
        {
            // Arrange
            
            var initialQuantity = 10;
            var stock = new Stock { Quantity = initialQuantity };
            _context.Stocks.Add(stock);
            await _context.SaveChangesAsync();
            var productId = stock.ProductId;

            // Act & Assert
            // Simulating a concurrency exception
            var exception = await Assert.ThrowsAsync<DbUpdateConcurrencyException>(() => _repository.UpdateStockAsync(productId, -11));
            Assert.Contains("Concurrency error", exception.Message);
        }
    }
}
